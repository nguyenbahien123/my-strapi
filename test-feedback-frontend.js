/**
 * Test Feedback API t·ª´ Frontend
 * S·ª≠ d·ª•ng ƒë·ªÉ test API feedback v·ªõi file upload
 */

const BASE_URL = 'http://localhost:1337/api/feedbacks';

// Test data
const testFeedback = {
  Type: 'Issue',
  Title: 'V·∫•n ƒë·ªÅ v·ªÅ ƒëi·ªán - Test t·ª´ Frontend',
  Content: 'ƒêi·ªán b·ªã c√∫p th∆∞·ªùng xuy√™n v√†o bu·ªïi t·ªëi. C·∫ßn kh·∫Øc ph·ª•c g·∫•p.',
  Resident: 39 // ID c·ªßa resident (published)
};

// Test files (t·∫°o file test)
function createTestFile() {
  const content = 'This is a test file content';
  const blob = new Blob([content], { type: 'text/plain' });
  return new File([blob], 'test-file.txt', { type: 'text/plain' });
}

// Test t·∫°o feedback kh√¥ng c√≥ file
async function testCreateFeedbackWithoutFiles() {
  console.log('=== Test t·∫°o feedback kh√¥ng c√≥ file ===');
  
  try {
    const formData = new FormData();
    formData.append("data[Type]", testFeedback.Type);
    formData.append("data[Title]", testFeedback.Title);
    formData.append("data[Content]", testFeedback.Content);
    formData.append("data[Resident]", testFeedback.Resident);

    const response = await fetch(BASE_URL, {
      method: 'POST',
      body: formData
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Success:', result);
      return result.data.id; // Tr·∫£ v·ªÅ ID ƒë·ªÉ test update
    } else {
      console.error('‚ùå Error:', result);
      return null;
    }
  } catch (error) {
    console.error('‚ùå Network Error:', error);
    return null;
  }
}

// Test t·∫°o feedback c√≥ file
async function testCreateFeedbackWithFiles() {
  console.log('=== Test t·∫°o feedback c√≥ file ===');
  
  try {
    const formData = new FormData();
    formData.append("data[Type]", testFeedback.Type);
    formData.append("data[Title]", testFeedback.Title + ' - With Files');
    formData.append("data[Content]", testFeedback.Content);
    formData.append("data[Resident]", testFeedback.Resident);

    // Th√™m file test
    const testFile = createTestFile();
    formData.append("files.attachments", testFile);

    const response = await fetch(BASE_URL, {
      method: 'POST',
      body: formData
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Success with files:', result);
      return result.data.id;
    } else {
      console.error('‚ùå Error with files:', result);
      return null;
    }
  } catch (error) {
    console.error('‚ùå Network Error with files:', error);
    return null;
  }
}

// Test l·∫•y danh s√°ch feedback
async function testGetFeedbacks() {
  console.log('=== Test l·∫•y danh s√°ch feedback ===');
  
  try {
    const response = await fetch(BASE_URL);
    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Feedbacks:', result);
      return result.data;
    } else {
      console.error('‚ùå Error getting feedbacks:', result);
      return [];
    }
  } catch (error) {
    console.error('‚ùå Network Error getting feedbacks:', error);
    return [];
  }
}

// Test l·∫•y chi ti·∫øt feedback
async function testGetFeedbackById(id) {
  console.log(`=== Test l·∫•y chi ti·∫øt feedback ID: ${id} ===`);
  
  try {
    const response = await fetch(`${BASE_URL}/${id}`);
    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Feedback detail:', result);
      return result.data;
    } else {
      console.error('‚ùå Error getting feedback detail:', result);
      return null;
    }
  } catch (error) {
    console.error('‚ùå Network Error getting feedback detail:', error);
    return null;
  }
}

// Test c·∫≠p nh·∫≠t feedback
async function testUpdateFeedback(id) {
  console.log(`=== Test c·∫≠p nh·∫≠t feedback ID: ${id} ===`);
  
  try {
    const updateData = {
      data: {
        StatusFeedback: 'ƒêang x·ª≠ l√Ω',
        Title: testFeedback.Title + ' - Updated'
      }
    };

    const response = await fetch(`${BASE_URL}/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(updateData)
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Updated feedback:', result);
      return result.data;
    } else {
      console.error('‚ùå Error updating feedback:', result);
      return null;
    }
  } catch (error) {
    console.error('‚ùå Network Error updating feedback:', error);
    return null;
  }
}

// Test x√≥a feedback
async function testDeleteFeedback(id) {
  console.log(`=== Test x√≥a feedback ID: ${id} ===`);
  
  try {
    const response = await fetch(`${BASE_URL}/${id}`, {
      method: 'DELETE'
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Deleted feedback:', result);
      return true;
    } else {
      console.error('‚ùå Error deleting feedback:', result);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Network Error deleting feedback:', error);
    return false;
  }
}

// Test validation errors
async function testValidationErrors() {
  console.log('=== Test validation errors ===');
  
  const testCases = [
    {
      name: 'Missing Type',
      data: {
        Title: 'Test Title',
        Content: 'Test Content',
        Resident: 1
      }
    },
    {
      name: 'Invalid Type',
      data: {
        Type: 'InvalidType',
        Title: 'Test Title',
        Content: 'Test Content',
        Resident: 1
      }
    },
    {
      name: 'Missing Title',
      data: {
        Type: 'Issue',
        Content: 'Test Content',
        Resident: 1
      }
    },
    {
      name: 'Empty Title',
      data: {
        Type: 'Issue',
        Title: '',
        Content: 'Test Content',
        Resident: 1
      }
    },
    {
      name: 'Missing Content',
      data: {
        Type: 'Issue',
        Title: 'Test Title',
        Resident: 1
      }
    },
    {
      name: 'Missing Resident',
      data: {
        Type: 'Issue',
        Title: 'Test Title',
        Content: 'Test Content'
      }
    },
    {
      name: 'Invalid Resident ID',
      data: {
        Type: 'Issue',
        Title: 'Test Title',
        Content: 'Test Content',
        Resident: 999999
      }
    }
  ];

  for (const testCase of testCases) {
    console.log(`Testing: ${testCase.name}`);
    
    try {
      const formData = new FormData();
      Object.entries(testCase.data).forEach(([key, value]) => {
        formData.append(`data[${key}]`, value);
      });

      const response = await fetch(BASE_URL, {
        method: 'POST',
        body: formData
      });

      const result = await response.json();
      
      if (response.status === 400) {
        console.log(`‚úÖ Expected validation error for ${testCase.name}:`, result.message);
      } else {
        console.error(`‚ùå Unexpected success for ${testCase.name}:`, result);
      }
    } catch (error) {
      console.error(`‚ùå Network Error for ${testCase.name}:`, error);
    }
  }
}

// Ch·∫°y t·∫•t c·∫£ tests
async function runAllTests() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu test Feedback API...');
  
  // Test validation errors tr∆∞·ªõc
  await testValidationErrors();
  
  // Test t·∫°o feedback
  const feedbackId1 = await testCreateFeedbackWithoutFiles();
  const feedbackId2 = await testCreateFeedbackWithFiles();
  
  // Test l·∫•y danh s√°ch
  await testGetFeedbacks();
  
  // Test l·∫•y chi ti·∫øt
  if (feedbackId1) {
    await testGetFeedbackById(feedbackId1);
  }
  
  // Test c·∫≠p nh·∫≠t
  if (feedbackId1) {
    await testUpdateFeedback(feedbackId1);
  }
  
  // Test x√≥a
  if (feedbackId2) {
    await testDeleteFeedback(feedbackId2);
  }
  
  console.log('üèÅ Ho√†n th√†nh test Feedback API!');
}

// Export functions ƒë·ªÉ s·ª≠ d·ª•ng trong browser
if (typeof window !== 'undefined') {
  window.FeedbackAPI = {
    testCreateFeedbackWithoutFiles,
    testCreateFeedbackWithFiles,
    testGetFeedbacks,
    testGetFeedbackById,
    testUpdateFeedback,
    testDeleteFeedback,
    testValidationErrors,
    runAllTests
  };
}

// Ch·∫°y tests n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    testCreateFeedbackWithoutFiles,
    testCreateFeedbackWithFiles,
    testGetFeedbacks,
    testGetFeedbackById,
    testUpdateFeedback,
    testDeleteFeedback,
    testValidationErrors,
    runAllTests
  };
}

// Auto run n·∫øu trong browser
if (typeof window !== 'undefined') {
  // Uncomment d√≤ng d∆∞·ªõi ƒë·ªÉ t·ª± ƒë·ªông ch·∫°y tests
  // runAllTests();
} 